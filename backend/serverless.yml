service: serverless-beasties-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    USER_TABLE: Beasties-user-${self:provider.stage}
    ANIMAL_TABLE: Beasties-animal-${self:provider.stage}
    USER_ANIMAL_REQUESTS_TABLE: Beasties-request-${self:provider.stage}
    IMAGES_S3_BUCKET: beasties-s3-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
  tracing:
    lambda: true
    apiGateway: true

custom:
  topicName: beasties-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Beasties API
        description: API for Beasties application
    models:
      - name: CreateUserAPIRequest
        contentType: application/json
        schema: ${file(models/create-user.json)}
      - name: CreateAnimalAPIRequest
        contentType: application/json
        schema: ${file(models/create-animal.json)}
      - name: CreateRequestAPIRequest
        contentType: application/json
        schema: ${file(models/create-request.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(models/update-requestStatus.json)}
      - name: UpdateUser
        contentType: application/json
        schema: ${file(models/update-user.json)}
      - name: UpdateAnimal
        contentType: application/json
        schema: ${file(models/update-animal.json)}
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false

functions:
  
  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: user
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Create a regular user or shelter user
            requestModels:
              'application/json': CreateUserAPIRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
  
  CreateAnimal:
    handler: src/lambda/http/createAnimal.handler
    events:
      - http:
          method: post
          path: animal
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new animal
            description: Create a pet animal
            requestModels:
              'application/json': CreateAnimalAPIRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANIMAL_TABLE}
  
  CreateRequest:
    handler: src/lambda/http/createRequest.handler
    events:
      - http:
          method: post
          path: request
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new request
            description: Create an adoption/date request for an animal
            requestModels:
              'application/json': CreateRequestAPIRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_ANIMAL_REQUESTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*
  
  GetUserByUserName:
    handler: src/lambda/http/getUserByUsername.handler
    events:
      - http:
          method: get
          path: user/{userName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
  
  GetAllUsersByFilter:
    handler: src/lambda/http/getUsersByFilter.handler
    events:
      - http:
          method: get
          path: users/{userType}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*

  GetAnimalByNameAndShelter:
    handler: src/lambda/http/getAnimalByNameAndShelter.handler
    events:
      - http:
          method: get
          path: animal/{animalName}/{shelterName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANIMAL_TABLE}
  
  GetAnimalsOfShelter:
    handler: src/lambda/http/getAnimalsOfShelter.handler
    events:
      - http:
          method: get
          path: animalsGet/{shelterName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANIMAL_TABLE}
  
  GetAllAnimals:
    handler: src/lambda/http/getAllAnimals.handler
    events:
      - http:
          method: get
          path: animalsGet
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANIMAL_TABLE}

  GetAllRequestsForUser:
    handler: src/lambda/http/getAllRequestsForUser.handler
    events:
      - http:
          method: get
          path: request/{userName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_ANIMAL_REQUESTS_TABLE}

  GetRequestsForUser:
    handler: src/lambda/http/getRequestsForUser.handler
    events:
      - http:
          method: get
          path: request/{userName}/{requestStatus}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_ANIMAL_REQUESTS_TABLE}

  GetPendingReqForShelter:
    handler: src/lambda/http/getPendingReqForShelter.handler
    events:
      - http:
          method: get
          path: requestsForShelterOwner/{shelterName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*

  GetRequestsForPet:
    handler: src/lambda/http/getRequestsForPet.handler
    events:
      - http:
          method: get
          path: requestsForPet/{animalName}/{shelterName}/{requestStatus}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
  
  GetRequestDetails:
    handler: src/lambda/http/getRequestDetails.handler
    events:
      - http:
          method: get
          path: requestDetails/{userName}/{shelterName}/{animalName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
  
  UpdateRequestByShelter:
    handler: src/lambda/http/updateRequestByShelter.handler
    events:
      - http:
          method: patch
          path: requestEditByShelter/{shelterOwnerName}/{customerName}/{shelterName}/{animalName}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update the requestStatus of a pet by shelter
            description: Update an existing post item
            requestModels:
              'application/json': UpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*
  
  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    events:
      - http:
          method: patch
          path: userEdit/{userName}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update user
            description: Update bio, name, location and avatar of a user
            requestModels:
              'application/json': UpdateUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*

  UpdateAnimal:
    handler: src/lambda/http/updateAnimal.handler
    events:
      - http:
          method: patch
          path: animalEdit/{animalName}/{shelterName}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update animal
            description: Update bio, age and availability, disposition of a pet animal
            requestModels:
              'application/json': UpdateAnimal
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*

  DeleteRequest:
    handler: src/lambda/http/deleteRequest.handler
    events:
      - http:
          method: delete
          path: requestDelete/{userName}/{shelterName}/{animalName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
  
  DeleteUser:
    handler: src/lambda/http/deleteUser.handler
    events:
      - http:
          method: delete
          path: userDelete/{userName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*
  
  DeleteAnimal:
    handler: src/lambda/http/deleteAnimal.handler
    events:
      - http:
          method: delete
          path: animalDelete/{animalName}/{shelterName}/{shelterOwnerName}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
      - Effect: Allow
        Action:
          - execute-api:Invoke
        Resource: arn:aws:execute-api:*:*:*
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: images/user/{imageKey}
          cors: true
      - http:
          method: post
          path: images/animal/{imageKey}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    #User-Table
    BeastiesUserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    #Animal-Table
    BeastiesAnimalDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ANIMAL_TABLE}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: shelterName
            AttributeType: S
          - AttributeName: animalName_shelterName
            AttributeType: S
        KeySchema:
          - AttributeName: animalName_shelterName
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: shelterAnimalNameGSI
            KeySchema:
              - AttributeName: shelterName
                KeyType: HASH
              - AttributeName: type
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        
        
    #User-Animal-Request-Table
    BeastiesRequestsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_ANIMAL_REQUESTS_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
          - AttributeName: shelterName
            AttributeType: S
          - AttributeName: animalName
            AttributeType: S
          - AttributeName: animalName_shelterName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
          - AttributeName: animalName_shelterName
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: requestsGSI
            KeySchema:
              - AttributeName: shelterName
                KeyType: HASH
              - AttributeName: animalName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    #Images-Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    #Request body validator
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
      
    #Api gateway Response Default 4xx
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi